import os
import random

import requests
from telegram.utils.request import Request
import string

from django.core.management.base import BaseCommand
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import CallbackContext, Updater, MessageHandler, Filters, CallbackQueryHandler


from bot.models import *
from tl_shop import settings
import datetime



def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


# PaymentLinkGenerate
def payment_link_generate(u1, u2):
    paysite = "https://lk.rukassa.pro/api/v1/create"
    datajs = {
        "shop_id": 174,
        "token": "470008a4755424a2792381c470277b91",
        "order_id": u1,
        "amount": u2
    }
    response = requests.post(f"{paysite}", datajs)
    #print(response.json())
    #urltopay = response.json()
    return response.json()



#print(payment_link_generate(123, 340))

'''
def payment_history_last(pk):
    s = requests.Session()
    h = s.get('https://lk.rukassa.pro/api/v1/getPayInfo').json()
    order = Order.objects.get(pk=pk)
    res = "NO"
    if order.step == 2:
        for transition in h["data"]:
            if order.pay == transition["amount"] and id == transition["comment"] and transition["STATUS"] == "WAIT":
                res = "OK"
                order.step = 3
                order.save()
    return res
'''

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ qiwi
def payment_history_last(pk):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + settings.Token
    #parameters = {'rows': 50}
    order = Order.objects.get(pk=pk)
    transition = s.get('https://lk.rukassa.pro/api/v1/getPayInfo?id=' + order.payid).json()
    res = "NO"
    #About PAID
    if order.step == 2:
            print(transition)
            if order.payid == transition["id"] and order.pay == transition["amount"] and transition["status"] == "PAID":
                res = "OK"
                order.step = 3
                order.save()
    print(res)
    return res


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def generate_name():
    length = 10
    letters = string.ascii_letters + string.digits
    rand_string = ''.join(random.choice(letters) for i in range(length))
    return rand_string


# –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_mess(pk, text):
    message, _ = MessageText.objects.get_or_create(pk=pk, defaults={"message": text})
    return message.message


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_menu(pk, text):
    menu, _ = MenuText.objects.get_or_create(pk=pk, defaults={"button": text})
    return menu.button


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_person(chat_id, name=""):
    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': name,
            'level': 1
        }
    )
    return p


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def build_menu(buttons, n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu.json

# –°–æ–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
def zparse_data(p, data):
    order = p.order.filter(step__in=[1])[0]
    product = order.product
    kol_enter = order.data_kol + 1
    order.data_kol = kol_enter
    order.data_have = order.data_have + data + "\n"
    order.save()

    message_text = reply_markup = ""
    if len(product.data.split(";")) == kol_enter or len(product.data) == 0:
        # –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
        order.step = 2
        order.code = ''.join(random.choice("0123456789") for i in range(9))
        urltopay = order.urltopay = str(payment_link_generate(order.code, product.price1)["url"])
        idtocheck = order.payid = str(payment_link_generate(order.code, product.price1)["id"])
        order.save()
        message_text = get_mess(8, f"üëâ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ"
                                   f""
                                   f"{urltopay}"
                                   f""
                                   f"üëâ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤–∞—à –±–∏–ª–µ—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚≠êÔ∏è–ú–æ–∏ –±–∏–ª–µ—Ç—ã"
                                ).format(code=order.code, pay=order.pay, urltopay=order.urltopay)

        keyboard = [[InlineKeyboardButton(get_menu(8, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"), callback_data='check-' + str(idtocheck))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
#    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –§–ò–û, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∑–∞–∫–∞–∑
#        if kol_enter == 1:
#            order.fio = data
#            order.save()
#        elif kol_enter == 2:
#            order.phone = data
#            order.save()
#        message_text = get_mess(5, "–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ/–≤–≤–µ–¥–∏—Ç–µ {data}").format(
#            data=product.data.split("\n")[kol_enter])
    return (message_text, reply_markup)

# timedelta
def timedelta_to_dhms(duration):
    # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    days, seconds = duration.days, duration.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    return days, hours, minutes, seconds

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@log_errors
def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    p = get_person(chat_id, update.message.from_user.username)
    message_text = get_mess(7, "–ú—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")
    reply_markup = ""

    import datetime

    if text == "/start" or text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É":
        if text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É" and p.order.filter(step__in=[1]).count() > 0:
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            order = p.order.filter(step__in=[1])[0]
            order.step = 6
            order.save()
            update.message.reply_text(text=get_mess(6, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"))
        # –°—Ç–∞—Ä—Ç
        message_text = get_mess(1, "üëã –Ø - –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–æ—Ç CALottery"
                                   "–ü—Ä–µ–∂–¥–µ, —á–µ–º –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏–≥—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ")
        reply_markup = ReplyKeyboardMarkup([
            [get_menu(1, "üìã –õ–æ—Ç–µ—Ä–µ—è")],
            [get_menu(2, "üìù –û—Ç–∑—ã–≤—ã"), get_menu(3, "‚≠êÔ∏è –ú–æ–∏ –±–∏–ª–µ—Ç—ã")],
            [get_menu(4, "üéàÔ∏è FAQ")]
        ])
    elif MenuText.objects.filter(button=text).count() != 0:
        button = MenuText.objects.filter(button=text)[0]
        if button.pk == 1:

            message_text = get_mess(2, "üìå –õ–æ—Ç–æ MegaMillions —ç—Ç–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –ª–æ—Ç–µ—Ä–µ—è, –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ—à–ª–∞ –≤ 1996 –≥–æ–¥—É, –∞ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∏ 6 —à—Ç–∞—Ç–æ–≤."
                                       ""
                                       "–í –Ω–∞—à–µ –≤—Ä–µ–º—è –≤ –ª–æ—Ç–æ –ú–µ–≥–∞–º–∏–ª–ª–∏–æ–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É—á–∞—Å—Ç–∏–µ –∂–∏—Ç–µ–ª–∏ 45 —à—Ç–∞—Ç–æ–≤ –∏ 47 —é—Ä–∏—Å–¥–∏–∫—Ü–∏–π."
                                       ""
                                       "–¢–∏—Ä–∞–∂–∏ –ª–æ—Ç–µ—Ä–µ–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–≤–∞–∂–¥—ã –≤ –Ω–µ–¥–µ–ª—é, –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º."
                                       ""
                                       "üëâ –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–π –∏–≥—Ä–µ –ú–µ–≥–∞ –ú–∏–ª–ª–∏–æ–Ω—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞—Ä–æ–≤ –∏ –º–µ–≥–∞ —à–∞—Ä (Mega Ball), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ–ª—å –±–æ–Ω—É—Å —à–∞—Ä–∞."
)
            keyboard = [[InlineKeyboardButton(cat.text, callback_data='cat-' + str(cat.pk))] for cat in
                        Category.objects.filter(nesting_level=1)]
            reply_markup = InlineKeyboardMarkup(keyboard)
        elif button.pk == 2:
            message_text = get_mess(11, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif button.pk == 3:

            if p.order.filter(step__in=[5]).count() != 0:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                message_text = get_mess(15, "–í–∞—à–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã:")

                for ee in p.order.filter(step__in=[5]):
                    #
                    context.bot.sendMessage(chat_id=chat_id, text=datetime.datetime.strftime(ee.date_create, "%Y-%m-%d %H:%M:%S") + ": \n" + ee.comment)

                    context.bot.sendMessage(chat_id=chat_id, text="üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–∏—Ö –±–∏–ª–µ—Ç–æ–≤:")
                    for pp in FileOrder.objects.filter(order=ee):
                        print(pp.file_order.url)
                        orderphoto = pp.file_order
                        context.bot.send_photo(chat_id, orderphoto)
                    datebuyweek = datetime.datetime.weekday(ee.date_create)
                    # –¥–∞—Ç–∞ —Å–µ–π—á–∞—Å
                    datebnow = datetime.datetime.now()
                    # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
                    dateb = datetime.datetime.replace(ee.date_create, tzinfo=None)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –í—Ç–æ—Ä–Ω–∏–∫
                    tuesday = dateb + datetime.timedelta((2 - dateb.weekday()) % 7)
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü—è—Ç–Ω–∏—Ü—É
                    friday = dateb + datetime.timedelta((4 - dateb.weekday()) % 7)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã
                    fr = (datetime.datetime.strptime(str(friday.date()), "%Y-%m-%d") + datetime.timedelta(hours=19, minutes=45))
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞
                    tu = (datetime.datetime.strptime(str(tuesday.date()), "%Y-%m-%d") + datetime.timedelta(hours=19, minutes=45))

                    print(fr)
                    print("ITOGO:")
                    diff2 = fr - datebnow
                    diff3 = tu - datebnow
                    print(diff2.days)

                    hours1 = int(diff2.seconds // (60 * 60))
                    mins1 = int((diff2.seconds // 60) % 60)
                    hours2 = int(diff3.seconds // (60 * 60))
                    mins2 = int((diff3.seconds // 60) % 60)

                    if datebuyweek in [2, 3, 4]:
                        context.bot.sendMessage(chat_id=chat_id, text=f"üï§ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ {diff2.days} —Å—É—Ç–æ–∫ {hours1} —á–∞—Å–æ–≤ {mins1} –º–∏–Ω—É—Ç")
                    else:
                        context.bot.sendMessage(chat_id=chat_id, text=f"üï§ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ {diff3.days} —Å—É—Ç–æ–∫ {hours2} —á–∞—Å–æ–≤ {mins2} –º–∏–Ω—É—Ç")
                    #print(datetime.datetime.weekday(ee.date_create))
                    #print(datetime.datetime.today().weekday())
                    #print(datetime.datetime.today().strftime("%Y-%m-%d %H:%M:%S"))

#    file_ord = FileOrder()
#    file_ord.file_order.name = "documents/" + name

            if p.order.filter(step__in=[3]).count() != 0:
                context.bot.sendMessage(chat_id=chat_id, text="üõí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:")

                for ee in p.order.filter(step__in=[3]):
                    context.bot.sendMessage(chat_id=chat_id, text=datetime.datetime.strftime(ee.date_create, "%Y-%m-%d %H:%M:%S") + ": \n" + ee.comment)

            if p.order.filter(step__in=[5]).count() == 0 and p.order.filter(step__in=[3]).count() == 0 and p.order.filter(step__in=[4]).count() != 0:
                context.bot.sendMessage(chat_id=chat_id, text="‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –±–∏–ª–µ—Ç—ã")

            if p.order.filter(step__in=[4]).count() != 0:
                context.bot.sendMessage(chat_id=chat_id, text="üí∏ –ë–∏–ª–µ—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã:")
                for ee in p.order.filter(step__in=[4]):
                    context.bot.sendMessage(chat_id=chat_id, text=datetime.datetime.strftime(ee.date_create, "%Y-%m-%d %H:%M:%S") + ": \n" + ee.comment)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
            #context.bot.send_photo(chat_id=chat_id, photo=open(product.img.path, 'rb'))
            #context.bot.sendMessage(chat_id=chat_id, text=bilet.text)

        elif button.pk == 4:
            message_text = get_mess(13, "‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–µ ?"
                                        "‚ùóÔ∏è –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ - –ú–æ–∏ –±–∏–ª–µ—Ç—ã."
                                        ""
                                        "‚ùì –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–∫—É–ø–∫–∞ ?"
                                        "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ—Ö —á–∞—Å–æ–≤."
                                        ""
                                        "‚ùì –Ø —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à ?"
                                        "‚ùóÔ∏è –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞."
                                        ""
                                        "‚ùì –ö–∞–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ ?"
                                        "‚ùóÔ∏è –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π 20% –æ—Ç —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –Ω–∞–ª–æ–≥–æ–≤ –∏ —Å–±–æ—Ä–æ–≤."
                                        ""
                                        "‚ùì –£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
                                        "‚ùóÔ∏è –ü–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @CaLottery_Support_bot")

    elif p.order.filter(step__in=[1]).count() != 0:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        message_text, reply_markup = zparse_data(p, text)

    if type(reply_markup) == str:

        update.message.reply_text(
            text=message_text
        )
    else:
        update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
@log_errors
def message_files(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    # –ö–∞—á–∞–µ–º —Ñ–∞–π–ª
    if update.message.document is None:
        file_id = update.message.photo[-1].file_id
        file_ras = "jpg"
    else:
        file_id = update.message.document.file_id
        file_ras = update.message.document.file_name.split('.')[-1]
    new_file = context.bot.get_file(file_id)
    path = os.path.join(settings.MEDIA_ROOT, 'documents') + "/"
    name = str(generate_name()) + "." + file_ras
    new_file.download(path + name)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –º–æ–¥–µ–ª–∏
    file_ord = FileOrder()
    file_ord.file_order.name = "documents/" + name
    file_ord.save()

    p = get_person(chat_id, update.message.from_user.username)
    #message_text = get_mess(7, "–ú—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")
    #reply_markup = ""
    if p.order.filter(step__in=[1]).count() != 0:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        file_ord.order = p.order.filter(step__in=[1])[0]
        file_ord.save()
        message_text, reply_markup = zparse_data(p, settings.DOMAIN + file_ord.file_order.url)

    if type(reply_markup) == str:
        update.message.reply_text(
            text=message_text
        )
    else:
        update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–æ–∫
@log_errors
def button(update: Update, context: CallbackContext):
    chat_id = context._chat_id_and_data[0]
    query = update.callback_query
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    p = get_person(chat_id)

    variant = query.data.split("-")
    message_text = reply_markup = ""
    # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ inline –∫–Ω–æ–ø–∫—É
    if p.order.filter(step__in=[1]).count() != 0:
        order = p.order.filter(step__in=[1])[0]
        order.step = 6
        order.save()
        update.message.reply_text(text=get_mess(6, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"))
    if variant[0] == "cat":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cat = Category.objects.get(pk=int(variant[1]))
        if (cat.nested_category.count() > 0):
            message_text = get_mess(2, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞")
            keyboard = [[InlineKeyboardButton(cat.text, callback_data='cat-' + str(cat.pk))] for cat in
                        cat.nested_category.all()]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text = get_mess(3, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
            keyboard = [[InlineKeyboardButton(product.name, callback_data='product-' + str(product.pk))] for product in
                        cat.products.all()]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "product":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä
        product = Product.objects.get(pk=int(variant[1]))
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        context.bot.send_photo(chat_id=chat_id, photo=open(product.img.path, 'rb'))
        context.bot.sendMessage(chat_id=chat_id, text=product.text)
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        if product.ask != "":
            message_text = product.ask.split(";")[0]
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='yes-' + str(product.pk) + "-" + "0"),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='no-' + str(product.pk) + "0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
            price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
            message_text = get_mess(4, "–ö –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.").format(price=price_list[p.level - 1])
            keyboard = [[InlineKeyboardButton(get_menu(6, "–ö—É–ø–∏—Ç—å"), callback_data='buy-' + str(product.pk))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "buy":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å
        product = Product.objects.get(pk=int(variant[1]))
        price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
        order = Order(step=1, product=product, user=p, pay=price_list[p.level - 1])
        order.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        description = product.description.split(";")
        if description != "":
            for message in description:
                if message != "":
                    context.bot.sendMessage(chat_id=chat_id, text=message)
        if product.data != "":
            context.bot.sendMessage(chat_id=chat_id, text="–û—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ.")
            message_text = get_mess(5, "{data}").format(data=product.data)
            reply_markup = ReplyKeyboardMarkup([
                [get_menu(7, "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")]
                ])
        else:
            #context.bot.sendMessage(chat_id=chat_id, text=message_text, reply_markup=reply_markup)

            message_text = get_mess(20,
                                    "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏—Ç—å, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ.").format(
                data=product.data)

            reply_markup = ReplyKeyboardMarkup([
                ['–û–ø–ª–∞—Ç–∏—Ç—å'],
                [get_menu(7, "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")]
                ])


        # –°–Ω–æ–≤–∞ –≤—Ä–µ–º—è
        datebnow = datetime.datetime.now()
        # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
        tuesday = datetime.datetime.today() + datetime.timedelta((1 - datebnow.weekday()) % 7)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü—è—Ç–Ω–∏—Ü—É
        friday = datetime.datetime.today() + datetime.timedelta((4 - datebnow.weekday()) % 7)
        datebuyweek = datetime.datetime.now().weekday()
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã
        fr = datetime.datetime.strptime(str(friday.date()), "%Y-%m-%d") + datetime.timedelta(hours=19, minutes=45)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞
        tu = datetime.datetime.strptime(str(tuesday.date()), "%Y-%m-%d") + datetime.timedelta(hours=19, minutes=45)

        diff2 = fr - datebnow
        diff3 = tu - datebnow

        hours1 = int(diff2.seconds // (60 * 60))
        mins1 = int((diff2.seconds // 60) % 60)
        hours2 = int(diff3.seconds // (60 * 60))
        mins2 = int((diff3.seconds // 60) % 60)

        if datebuyweek in [2, 3, 4]:
            context.bot.sendMessage(chat_id=chat_id,
                                    text=f"üï§ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ {diff2.days} —Å—É—Ç–æ–∫ {hours1} —á–∞—Å–æ–≤ {mins1} –º–∏–Ω—É—Ç")
        else:
            context.bot.sendMessage(chat_id=chat_id,
                                    text=f"üï§ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ {diff3.days} —Å—É—Ç–æ–∫ {hours2} —á–∞—Å–æ–≤ {mins2} –º–∏–Ω—É—Ç")

        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ

    elif variant[0] == "check":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        res = payment_history_last(variant[1])
        reply_markup = ReplyKeyboardMarkup([
            [get_menu(1, "üìã –¢–∞—Ä–∏—Ñ—ã")],
            [get_menu(2, "üìù –û—Ç–∑—ã–≤—ã"), get_menu(3, "‚≠êÔ∏è –ú–æ–∏ –±–∏–ª–µ—Ç—ã")],
            [get_menu(4, "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ])
        if res == "OK":
            message_text = get_mess(9, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            context.bot.sendMessage(chat_id="-797296858", text="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
        else:
            message_text = get_mess(10, "–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞")
    elif variant[0] == "yes":
        product = Product.objects.get(pk=int(variant[1]))
        if int(variant[2]) + 1 == len(product.ask.split(";")):
            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
            price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
            message_text = get_mess(4, "–ö –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.").format(price=price_list[p.level - 1])
            keyboard = [[InlineKeyboardButton(get_menu(6, "–ö—É–ø–∏—Ç—å"), callback_data='buy-' + str(product.pk))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text = product.ask.split(";")[int(variant[2]) + 1]
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='yes-' + str(product.pk) + "-" + str(int(variant[2]) + 1)),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='no-' + str(product.pk) + "0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "no":
        message_text = get_mess(14, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä")
    # query.answer()
    if type(reply_markup) == str:
        if message_text != "":
            context.bot.sendMessage(chat_id=chat_id, text=message_text)
        #query.edit_message_text(
        #    text=message_text
        #)
    else:
        context.bot.sendMessage(chat_id=chat_id, text=message_text, reply_markup=reply_markup)
        #query.edit_message_text(
        #    text=message_text,
        #    reply_markup=reply_markup
        #)


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç'

    def handle(self, *args, **options):
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN,
        )
        print(bot.get_me())

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot=bot,
            use_context=True,
        )

        message_handler = MessageHandler(Filters.text, do_echo)
        media_handler = MessageHandler(Filters.document, message_files)
        photo_handler = MessageHandler(Filters.photo, message_files)
        updater.dispatcher.add_handler(message_handler)
        updater.dispatcher.add_handler(media_handler)
        updater.dispatcher.add_handler(photo_handler)

        updater.dispatcher.add_handler(CallbackQueryHandler(button))
        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        updater.idle()
